/* Autogenerated by mlir-tblgen; don't manually edit */

#ifdef GEN_PASS_DECL
// Generate declarations for all passes.
#define GEN_PASS_DECL_MATMULOPT
#define GEN_PASS_DECL_SAMPLETYPECHECK
#undef GEN_PASS_DECL
#endif // GEN_PASS_DECL

//===----------------------------------------------------------------------===//
// MatmulOpt
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_MATMULOPT
#undef GEN_PASS_DECL_MATMULOPT
#endif // GEN_PASS_DECL_MATMULOPT
#ifdef GEN_PASS_DEF_MATMULOPT
namespace impl {

template <typename DerivedT>
class MatmulOptBase : public ::mlir::OperationPass<> {
public:
  using Base = MatmulOptBase;

  MatmulOptBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  MatmulOptBase(const MatmulOptBase &other) : ::mlir::OperationPass<>(other) {}
  MatmulOptBase& operator=(const MatmulOptBase &) = delete;
  MatmulOptBase(MatmulOptBase &&) = delete;
  MatmulOptBase& operator=(MatmulOptBase &&) = delete;
  ~MatmulOptBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("matmul-opt");
  }
  ::llvm::StringRef getArgument() const override { return "matmul-opt"; }

  ::llvm::StringRef getDescription() const override { return "Optimize matrix multiplications using tiling"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("MatmulOpt");
  }
  ::llvm::StringRef getName() const override { return "MatmulOpt"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::linalg::LinalgDialect>();
    registry.insert<mlir::scf::SCFDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(MatmulOptBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_MATMULOPT
#endif // GEN_PASS_DEF_MATMULOPT

//===----------------------------------------------------------------------===//
// SampleTypeCheck
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_SAMPLETYPECHECK
#undef GEN_PASS_DECL_SAMPLETYPECHECK
#endif // GEN_PASS_DECL_SAMPLETYPECHECK
#ifdef GEN_PASS_DEF_SAMPLETYPECHECK
namespace impl {

template <typename DerivedT>
class SampleTypeCheckBase : public ::mlir::OperationPass<> {
public:
  using Base = SampleTypeCheckBase;

  SampleTypeCheckBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  SampleTypeCheckBase(const SampleTypeCheckBase &other) : ::mlir::OperationPass<>(other) {}
  SampleTypeCheckBase& operator=(const SampleTypeCheckBase &) = delete;
  SampleTypeCheckBase(SampleTypeCheckBase &&) = delete;
  SampleTypeCheckBase& operator=(SampleTypeCheckBase &&) = delete;
  ~SampleTypeCheckBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("sample-type-check");
  }
  ::llvm::StringRef getArgument() const override { return "sample-type-check"; }

  ::llvm::StringRef getDescription() const override { return "checks the type of each op"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("SampleTypeCheck");
  }
  ::llvm::StringRef getName() const override { return "SampleTypeCheck"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(SampleTypeCheckBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_SAMPLETYPECHECK
#endif // GEN_PASS_DEF_SAMPLETYPECHECK
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// MatmulOpt Registration
//===----------------------------------------------------------------------===//

inline void registerMatmulOpt() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::sample::createMatmulOptPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerMatmulOptPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::sample::createMatmulOptPass();
  });
}

//===----------------------------------------------------------------------===//
// SampleTypeCheck Registration
//===----------------------------------------------------------------------===//

inline void registerSampleTypeCheck() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::sample::createSampleTypeCheckPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerSampleTypeCheckPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::sample::createSampleTypeCheckPass();
  });
}

//===----------------------------------------------------------------------===//
//  Registration
//===----------------------------------------------------------------------===//

inline void registerPasses() {
  registerMatmulOpt();
  registerSampleTypeCheck();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
// Deprecated. Please use the new per-pass macros.
#ifdef GEN_PASS_CLASSES

template <typename DerivedT>
class MatmulOptBase : public ::mlir::OperationPass<> {
public:
  using Base = MatmulOptBase;

  MatmulOptBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  MatmulOptBase(const MatmulOptBase &other) : ::mlir::OperationPass<>(other) {}
  MatmulOptBase& operator=(const MatmulOptBase &) = delete;
  MatmulOptBase(MatmulOptBase &&) = delete;
  MatmulOptBase& operator=(MatmulOptBase &&) = delete;
  ~MatmulOptBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("matmul-opt");
  }
  ::llvm::StringRef getArgument() const override { return "matmul-opt"; }

  ::llvm::StringRef getDescription() const override { return "Optimize matrix multiplications using tiling"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("MatmulOpt");
  }
  ::llvm::StringRef getName() const override { return "MatmulOpt"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    registry.insert<mlir::linalg::LinalgDialect>();
    registry.insert<mlir::scf::SCFDialect>();
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(MatmulOptBase<DerivedT>)

protected:
};

template <typename DerivedT>
class SampleTypeCheckBase : public ::mlir::OperationPass<> {
public:
  using Base = SampleTypeCheckBase;

  SampleTypeCheckBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  SampleTypeCheckBase(const SampleTypeCheckBase &other) : ::mlir::OperationPass<>(other) {}
  SampleTypeCheckBase& operator=(const SampleTypeCheckBase &) = delete;
  SampleTypeCheckBase(SampleTypeCheckBase &&) = delete;
  SampleTypeCheckBase& operator=(SampleTypeCheckBase &&) = delete;
  ~SampleTypeCheckBase() = default;

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("sample-type-check");
  }
  ::llvm::StringRef getArgument() const override { return "sample-type-check"; }

  ::llvm::StringRef getDescription() const override { return "checks the type of each op"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("SampleTypeCheck");
  }
  ::llvm::StringRef getName() const override { return "SampleTypeCheck"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(SampleTypeCheckBase<DerivedT>)

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
